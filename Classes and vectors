#include <iostream>
#include <string>
#include <vector>
using namespace std;

class Review {
   public:
      // Sets the rating and comment for a review
      void SetRatingAndComment(int revRating, string revComment) {
         rating = revRating;          // Assign the rating
         comment = revComment;        // Assign the comment
      }

      // Getter method to retrieve the review's rating
      int GetRating() const { return rating; }

      // Getter method to retrieve the review's comment
      string GetComment() const { return comment; }

   private:
      int rating = -1;                // Default rating value (-1 means no valid rating)
      string comment = "NoComment";  // Default comment
};

int main() {
   vector<Review> reviewList;        // A vector to store all reviews
   Review currReview;                // Temporary review object for input
   int currRating;                   // Temporary variable for the current rating
   string currComment;               // Temporary variable for the current comment
   unsigned int i;                   // Loop index variable

   // Prompt for user input
   cout << "Type rating + comments. To end: -1" << endl;
   cin >> currRating;                // Input the first rating

   // Loop to collect reviews until the user enters -1
   while (currRating >= 0) {         
      getline(cin, currComment);     // Gets the rest of the line as the comment
      currReview.SetRatingAndComment(currRating, currComment); // Set the rating and comment for the current review
      reviewList.push_back(currReview); // Add the current review to the list
      cin >> currRating;             // Input the next rating
   }

   // Output comments for a specific rating
   cout << endl << "Type rating. To end: -1" << endl;
   cin >> currRating;                // Input the rating to search for

   while (currRating != -1) {        // Loop until the user enters -1
      for (i = 0; i < reviewList.size(); ++i) { // Iterate through the list of reviews
         currReview = reviewList.at(i); // Access the current review
         if (currRating == currReview.GetRating()) { // Check if the rating matches
            cout << currReview.GetComment() << endl; // Print the corresponding comment
         }
      }
      cin >> currRating;             // Input the next rating to search for
   }

   return 0; // End the program
}




///////////////// TWO CLASSES EXAMPLE ////////////////////




/#include <iostream>
#include <string>
#include <vector>
using namespace std;

class Review {
   public:
      void SetRatingAndComment(int revRating, string revComment) {
         rating = revRating;
         comment = revComment;
      }
      int GetRating() const { return rating; }
      string GetComment() const { return comment; }

   private:
      int rating = -1;
      string comment = "NoComment";
};
// END Review class


class Reviews {
   public:
      void InputReviews();
      void PrintCommentsForRating(int currRating) const;
      int GetAverageRating() const;

   private:
      vector<Review> reviewList;
};

// Get rating comment pairs, add each to list. -1 rating ends.
void Reviews::InputReviews() {
   Review currReview;
   int currRating;
   string currComment;

   cin >> currRating;
   while (currRating >= 0) {
      getline(cin, currComment); // Gets rest of line
      currReview.SetRatingAndComment(currRating, currComment);
      reviewList.push_back(currReview);
      cin >> currRating;
   }
}

// Print all comments for reviews having the given rating
void Reviews::PrintCommentsForRating(int currRating) const {
   Review currReview;
   unsigned int i;

   for (i = 0; i < reviewList.size(); ++i) {
      currReview = reviewList.at(i);
      if (currRating == currReview.GetRating()) {
         cout << currReview.GetComment() << endl;
      }
   }
}

int Reviews::GetAverageRating() const {
   int ratingsSum;
   unsigned int i;

   ratingsSum = 0;
   for (i = 0; i < reviewList.size(); ++i) {
      ratingsSum += reviewList.at(i).GetRating();
   }
   return (ratingsSum / reviewList.size());
}
// END Reviews class

int main() {
   Reviews allReviews;
   string currName;
   int currRating;

   cout << "Type ratings + comments. To end: -1" << endl;
   allReviews.InputReviews();

   cout << endl << "Average rating: ";
   cout << allReviews.GetAverageRating() << endl;

   // Output all comments for given rating
   cout << endl << "Type rating. To end: -1" << endl;
   cin >> currRating;
   while (currRating != -1) {
      allReviews.PrintCommentsForRating(currRating);
      cin >> currRating;
   }

   return 0;
}
